##Some texts are written in HTML for knitting

<span style="color:green"> Assign the data from the length column in the proteinData data frame to a new vector called proteinDataVec. \span
```{r}
proteinData <- read.csv("protein_data.csv", header = TRUE, stringsAsFactors = FALSE)

proteinDataVec <- proteinData$length
length(proteinDataVec) == nrow(proteinData)
```


<span style="color:green"> Used hist() and appropriate parameters to generate a histogram of the amount of caffeine in mg per 16 oz coffee. \span
```{r}
caffData <- read.csv("caffeine_jjp.csv")
hist(caffData$Caffeine_mg_in_16_oz_coffee, main = "Caffeine in Different Coffee Brands", xlab = "coffee amount (mg in 16 oz)", ylab = "frequency", breaks=2)
```
<span style="color:blue"> 
The histogram have a central tendency somewhere around 200. Its spread is from 100 to 300 mg in 16 oz. It is fairly symmetrical and not really skewed.
\span


<span style="color:green">Changed the breaks parameter to different values and rerun the code from question 1.3, in order to create a histogram that better represents the data. \span
```{r}
hist(caffData$Caffeine_mg_in_16_oz_coffee, main = "Caffeine in Different Coffee Brands", xlab = "coffee amount (mg in 16 oz)", ylab = "frequency", breaks=50)

hist(caffData$Caffeine_mg_in_16_oz_coffee, main = "Caffeine in Different Coffee Brands", xlab = "coffee amount (mg in 16 oz)", ylab = "frequency", breaks=20)

hist(caffData$Caffeine_mg_in_16_oz_coffee, main = "Caffeine in Different Coffee Brands", xlab = "coffee amount (mg in 16 oz)", ylab = "frequency", breaks=10)
```

<span style="color:blue"> 
Increasing the number for the breaks parameter increases the distance between every bar of the histogram.
\span


<span style="color:green"> Wrote commands that would return the number of different activities that the researchers identified in the data "DeathsFromTigers.csv". \span
```{r}
tigerData <- read.csv("DeathsFromTigers.csv")
tigerTable <- sort(table(tigerData$activity), decreasing=T)

length(tigerTable)
```


<span style="color:green">Created a bar graph using the barplot() command to visualize the data from DeathsFromTigers.csv. \span
```{r}

barplot(tigerTable, main = "Number of ppl in Tiger Attacks", xlab = "Activities", ylab = "Frequency", las=2)
```


<span style="color:green">Using the data from DeathsFromTigers.csv, created a pie chart to better represent the relative fraction of each activity to the total number of deaths. \span
```{r}
pie(tigerTable, main="Activities before Tiger Attacks")
```


<span style="color:green">Load the data from the file MeaslesOutbreaks.csv into R with the variable name measlesData. This file contains data regarding measles outbreaks in a population with declining vaccine uptake. \span
```{r}
measlesData <- read.csv("MeaslesOutbreaks.csv", header=TRUE, stringsAsFactors = FALSE)
```


<span style="color:green">Used the plot() command to plot a graph with yearByQuarter as the explanatory variable and confirmedCases as the response variable. \span
```{r}
plot(measlesData$yearByQuarter, measlesData$confirmedCases,  main="measles Data", xlab = "year by quarter", ylab = "number of confirmed cases")
```


<span style="color:green">Added the parameter type="l" to your plot() command from question 1.9. \span
```{r}
plot(measlesData$yearByQuarter, measlesData$confirmedCases,  main="measles Data", xlab = "year by quarter", ylab = "number of confirmed cases", type="l")
```
<span style="color:blue"> 
This makes my graph a line-graph instead of a scatter plot. Measles outbreaks have an overall increasing trend with a drop in around 2010. This increase in Measles outbreak is correlated with declining vaccine uptake.
\span

Installed the package BiocManager and then multtest by running these commands in my consol. 
```{r eval = FALSE}
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")

BiocManager::install() 

BiocManager::install("multtest") 

```

loaded a library of tools included in the multtest package (including the golub data) <br>
<span style="color:green">
The golub data is a set of data from a paper from Golub et al. Science 1999, 286(5439):531-537. This paper describes the first use of microarray (a lab tool) gene expression data to classify cancer cell subtypes that are difficult to distinguish morphologically, using acute leukemia (and its 2 common subtypes, ALL and AML) as a proof of principle. \span <br>
<span style="color:green">
I will be interacting with a subset of the original Golub et al. training data set, which contains normalized gene expression values for 3051 genes from 27 ALL and 11 AML patients derived from microarray analysis. 3 new objects will be loaded into my environment: golub, golub.gnames, and golub.cl. \span

*golub* is a matrix containing normalized microarray gene expression data for 3051 genes from the 38 leukemia patients. *golub.gnames* is a matrix containing the same 3051 rows in an equivalent order to golub, providing gene names for each row. *golub.col* is a numeric vector containing 38 numbers in the same column order as golub, providing leukemia subtype identifiers for each patient: 0 codes for ALL and 1 codes for AML.
```{r}
library(multtest)
data(golub)



```


<span style="color:green">Used the grep() function to find the row (in golub.gnames, which contains gene names) that contains the data for cyclin D3 (a gene whose expression difference correlates strongly with ALL versus AML status). \span
```{r}
grep("cyclin D3", golub.gnames[,2], ignore.case = TRUE, useBytes = FALSE)
golub.gnames[1042,2]
```


<span style="color:green"> Because ALL subtypes are represented as 0 in golub.col, I used the grep() function to find the columns that contains the data for ALL subtypes. \span
```{r}
golub.cl
grep("0", golub.cl)
```

<span style="color:blue"> 
columns 1 to 27 are ALL subtypes, and 28 to 38 are AML subtypes.
\span


<span style="color:green">calculated the mean expression of cyclin D3 mRNA in ALL patients and then in AML patients. \span
```{r}
#1042 is the row that contains cyclin D3 mRNA
ALLex <- mean(golub[1042, 1:27])
AMLex <- mean(golub[1042, 28:38])
ALLex 
AMLex

```


<span style="color:green">Used the apply() function to compute the mean expression of each gene for ALL and AML patients. Then computed the absolute value of the difference in means between ALL and AML patients. Stored results in a new vector (absMeanDiff). \span
```{r}
meanALL <- apply(golub[, 1:27], MARGIN = 1, FUN = mean)
meanAML <- apply(golub[, 28:38], MARGIN = 1, FUN = mean)

absMeanDiff <- abs(meanALL - meanAML)
```


<span style="color:green">Constructed a series of commands that will return the names of the 5 genes that have the largest absolute difference in mean expression between ALL and AML patients. \span
```{r}
meanALL <- apply(golub[, 1:27], MARGIN = 1, FUN = mean)
meanAML <- apply(golub[, 28:38], MARGIN = 1, FUN = mean)
newMatrix <- cbind(golub, absMeanDiff)

absMeanDiff <- abs(meanALL - meanAML)

soot <- sort(absMeanDiff, decreasing = TRUE)
five <- soot[1:5]
rowNUM <- c()
for(i in 1:5){
  position <- grep(five[i], newMatrix[,39], ignore.case = TRUE, useBytes = FALSE)
  rowNUM <- c(rowNUM, position)
}

names <- c()
for (i in rowNUM){
  names <- c(names, golub.gnames[i,2])
  
}
names
```

<span style="color:green"> 
Substitued the characters "ALL" and "AML" into the numbers 0 and 1 in golub.cl. This is then stored the variable gol.fac
\span
**2.9**
```{r}
gol.fac <- factor(golub.cl, levels=c(0,1), labels = c("ALL","AML"))
gol.fac
golub.cl
```



<span style="color:green"> 
Created a stripchart for normalized cyclin D3 expression as a function of patient cancer subtype (ALL or AML)
\span
```{r}
stripchart(golub[1042,] ~ gol.fac, method = "jitter", vertical = TRUE, ylab = "Normalized cyclin D3 expression", xlab = "Patient cancer subtype")
```

<span style="color:green">
Used plot() to create a scatter plot of the gene expression values for two genes that are used as subtype predictors: IL-8 (row 2663 of golub) and IL-8 precursor (row 2664). Then, created another plot with IL-8 and Zyxin (row 2124), another gene in the predictive set. 
\span
```{r}
plot(golub[2663,],golub[2664,], xlab = "IL-8", ylab = "IL-8 precursor", col=gol.fac)
plot(golub[2663,],golub[2124,], xlab="IL-8", ylab="Zyxin", col=gol.fac)
```
<span style="color:blue"> 
The grpah for IL-8 and IL-8 precursor is more visually correlated than the graph for IL-8 and Zyxin (because there is a clearer trend).
\span


<span style="color:green"> Created a histogram of the expression of cyclin D3 in ALL patients. \span
```{r}
hist(golub[1042,1:27], freq=FALSE, main= "cyclin D3 Expression (ALL)", xlab = "gene expression") 

```


<span style="color:green"> Plotted a histogram for the distribution of cyclin D3 expression in AML. Used the par() function to display this plot and the plot from the above codeblock in a 1x2 array. \span
```{r}
par(mfrow = c(1,2))
hist(golub[1042,1:27], freq=FALSE, main= "cyclin D3 Expression (ALL)", xlab = "gene expression") 
hist(golub[1042,28:38], freq=FALSE, main= "cyclin D3 Expression (AML)", xlab = "gene expression")
```
<span style="color:blue"> 
The 2nd table, cycin D3 Expression (AML) is more normally distributed. This is because the first table, cyclin D3 Expression (ALL) is more skewed left.
\span


<span style="color:green"> To better visully compare the 2 plots, I used the xlim= parameter for the histogram function to set -1 through 3 as the range of x values for both plots. \span
```{r}
par(mfrow = c(1,2))
hist(golub[1042,1:27], freq=FALSE, main= "cyclin D3 Expression (ALL)", xlab = "gene expression", xlim = range(-1,3))
hist(golub[1042,28:38], freq=FALSE, main= "cyclin D3 Expression (AML)", xlab = "gene expression", xlim = range(-1, 3), ylim= c(0,0.8))
```
<span style="color:blue"> 
The table for ALL patients have a central tendency with a greater value. ALL have a range from 0-3 and AML have a range from -1 - 1.5. ALL is skewed left, while AML have a more normal distribution.
\span

<span style="color:green"> Use the grep() command to determine how many genes with the label “oncogene” are in the gene expression data set \span
```{r}
OnVec <- grep("oncogene", golub.gnames[,2], ignore.case = TRUE, useBytes = FALSE)
length(OnVec)
```

<span style="color:green"> Found the most highly differentially expressed oncogene \span
```{r}
ONCmeanALL <- apply(golub[OnVec, 1:27], MARGIN = 1, FUN = mean)
ONCmeanAML <- apply(golub[OnVec, 28:38], MARGIN = 1, FUN = mean)
ONCabsMeanDiff <- abs(ONCmeanALL - ONCmeanAML)

ordered <- order(ONCabsMeanDiff, decreasing = TRUE) 

golub.gnames[OnVec[ordered[1]], 2]

```
<span style="color:blue"> 
GRO2 GRO2 oncogene is the most highly differenially expressed oncogene.
\span
